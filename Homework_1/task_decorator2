from typing import Type
import time
import sys

#  Реализуйте декоратор, который проверяет аргументы функции на тип данных. Соответствие аннотациям. 
# Рекомендую использовать метод annotations. В кач-ве результата возвращаем значение bool.

def check_argument_types(func):
    def wrapper(*args, **kwargs):
        annotations = func.__annotations__

        if len(args) > len(annotations):
            raise TypeError(f"{func.__name__}() missing {len(annotations) - len(args)} required positional argument")

        for arg_name, arg_type in annotations.items():
            if arg_name in kwargs:
                if not isinstance(kwargs[arg_name], arg_type):
                    return False
            elif arg_name in func.__code__.co_varnames:  # Проверяем, что аргумент с данным именем существует
                arg_index = list(func.__code__.co_varnames).index(arg_name)
                if not isinstance(args[arg_index], arg_type):
                    return False
        return func(*args, **kwargs)

    return wrapper

@check_argument_types
def example_function(x: int, s: str) -> bool:
    print(x, s)
    return True

result = example_function(10, "Hello, World!")
print(result)



# Напишите декоратор, замеряет время выполнения функции и кол-во памяти, которое занимает ответ.
def measure(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        mem_size = sys.getsizeof(result)
        print(f"Function {func.__name__} took {end_time - start_time:.6f} seconds and used {mem_size} bytes of memory.")
        return result
    return wrapper


@measure
def my_function(arg1, arg2):
    result = arg2 + arg2
    return result


result = my_function(10000, 50000)
print(result)


